<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Qoollo.ClickHouse.Net</name>
    </assembly>
    <members>
        <member name="T:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.ClickHouseAggregatingQueueProcessor`1">
            <summary>
            Aggregating queue with a set of worker threads. 
            Items are aggregated to packages and pushed to the processing queue. Worker-threads process packages using given Action.
            A package is sent to the processing queue either when a sufficient number of elements are dialed, or by timer.
            </summary>
            <typeparam name="T">Type of items for aggregation</typeparam>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.ClickHouseAggregatingQueueProcessor`1.MaxPackageSize">
            <summary>
            Max size of the package that can be added to the queue 
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.ClickHouseAggregatingQueueProcessor`1.TimerPeriodMs">
            <summary>
            Time in ms for package sending timer
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.ClickHouseAggregatingQueueProcessor`1.State">
            <summary>
            Current state
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.ClickHouseAggregatingQueueProcessor`1.CurrentQueueSize">
            <summary>
            Count of packages in the processing queue
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.ClickHouseAggregatingQueueProcessor`1.TotalProcessedItemsCount">
            <summary>
            Total count of items, that was processed
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.ClickHouseAggregatingQueueProcessor`1.TotalPushedItemsCount">
            <summary>
            Total count of items, that was added to the processing queue
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.ClickHouseAggregatingQueueProcessor`1.TotalAddedItemsCount">
            <summary>
            Total count of items, that was added by Add or AddPackage methods
            </summary>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.ClickHouseAggregatingQueueProcessor`1.#ctor(Qoollo.ClickHouse.Net.AggregatingQueueProcessor.Configuration.IClickHouseAggregatingQueueProcessorConfiguration,Qoollo.ClickHouse.Net.Repository.IClickHouseRepository,Qoollo.ClickHouse.Net.AggregatingQueueProcessor.IProcHolder{`0},Microsoft.Extensions.Logging.ILogger{Qoollo.ClickHouse.Net.AggregatingQueueProcessor.ClickHouseAggregatingQueueProcessor{`0}})">
            <summary>
            
            </summary>
            <param name="config"> Configuration for instance </param>
            <param name="repository"> IClickHouseRepository instance </param>
            <param name="proc"> The action that the Worker-threads will perform with packages from the processing queue </param>
            <param name="logger">Logger</param>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.ClickHouseAggregatingQueueProcessor`1.Add(`0)">
            <summary>
            Add an item to the next package that is being prepared to be added to the processing queue
            </summary>
            <param name="item"></param>
            <exception cref="T:System.InvalidOperationException"> Instance state is not correct for this action </exception>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.ClickHouseAggregatingQueueProcessor`1.AddPackage(System.Collections.Generic.List{`0})">
            <summary>
            Add the package to the processing queue
            </summary>
            <param name="package"></param>
            <exception cref="T:System.InvalidOperationException"> Instance state is not correct for this action </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Package size is too big </exception>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.ClickHouseAggregatingQueueProcessor`1.PushPackageToQueue">
            <summary>
            Force complete current package and add it to the processing queue
            </summary>
            <exception cref="T:System.InvalidOperationException"> Instance state is not correct for this action </exception>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.ClickHouseAggregatingQueueProcessor`1.Start">
            <summary>
            Start processing
            </summary>
            <exception cref="T:System.InvalidOperationException"> Instance state is not correct for this action  </exception>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.ClickHouseAggregatingQueueProcessor`1.Stop">
            <summary>
            Stop processing 
            </summary>
            <exception cref="T:System.InvalidOperationException"> Instance state is not correct for this action  </exception>
        </member>
        <member name="T:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.Configuration.ClickHouseAggregatingQueueProcessorConfiguration">
            <summary>
            Configuration for ClickHouseAggregatingQueueProcessor
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.Configuration.ClickHouseAggregatingQueueProcessorConfiguration.MaxPackageSize">
            <summary>
            Max size of the package that can be added to the queue 
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.Configuration.ClickHouseAggregatingQueueProcessorConfiguration.ProcessingThreadsCount">
            <summary>
            Count of worker-threads
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.Configuration.ClickHouseAggregatingQueueProcessorConfiguration.QueueMaxSize">
            <summary>
            Max size of processing-queue
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.Configuration.ClickHouseAggregatingQueueProcessorConfiguration.TimerPeriodMs">
            <summary>
            Time in ms for package sending timer
            </summary>
        </member>
        <member name="T:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.Configuration.IClickHouseAggregatingQueueProcessorConfiguration">
            <summary>
            Configuration for ClickHouseAggregatingQueueProcessor
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.Configuration.IClickHouseAggregatingQueueProcessorConfiguration.MaxPackageSize">
            <summary>
            Max size of the package that can be added to the queue 
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.Configuration.IClickHouseAggregatingQueueProcessorConfiguration.ProcessingThreadsCount">
            <summary>
            Count of worker-threads
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.Configuration.IClickHouseAggregatingQueueProcessorConfiguration.QueueMaxSize">
            <summary>
            Max size of processing-queue
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.Configuration.IClickHouseAggregatingQueueProcessorConfiguration.TimerPeriodMs">
            <summary>
            Time in ms for package sending timer
            </summary>
        </member>
        <member name="T:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.IClickHouseAggregatingQueueProcessor`1">
            <summary>
            Aggregating queue with a set of worker threads. 
            Items are aggregated to packages and pushed to the processing queue.Worker-threads process packages.
            </summary>
            <typeparam name="T">Type of items for aggregation</typeparam>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.IClickHouseAggregatingQueueProcessor`1.Add(`0)">
            <summary>
            Add an item to the next package that is being prepared to be added to the processing queue
            </summary>
            <param name="item"></param>
            <exception cref="T:System.InvalidOperationException"> Instance state is not correct for this action </exception>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.IClickHouseAggregatingQueueProcessor`1.AddPackage(System.Collections.Generic.List{`0})">
            <summary>
            Add the package to the processing queue
            </summary>
            <param name="package"></param>
            <exception cref="T:System.InvalidOperationException"> Instance state is not correct for this action </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.IClickHouseAggregatingQueueProcessor`1.PushPackageToQueue">
            <summary>
            Force complete current package and add it to the processing queue
            </summary>
            <exception cref="T:System.InvalidOperationException"> Instance state is not correct for this action </exception>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.IClickHouseAggregatingQueueProcessor`1.Start">
            <summary>
            Start processing
            </summary>
            <exception cref="T:System.InvalidOperationException"> Instance state is not correct for this action </exception>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.IClickHouseAggregatingQueueProcessor`1.Stop">
            <summary>
            Stop processing 
            </summary>
            <exception cref="T:System.InvalidOperationException"> Instance state is not correct for this action  </exception>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.IClickHouseAggregatingQueueProcessor`1.State">
            <summary>
            Current state
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.IClickHouseAggregatingQueueProcessor`1.CurrentQueueSize">
            <summary>
            Count of packages in the processing queue
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.IClickHouseAggregatingQueueProcessor`1.MaxPackageSize">
            <summary>
            Max size of the package that can be added to the queue 
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.IClickHouseAggregatingQueueProcessor`1.TotalProcessedItemsCount">
            <summary>
            Total count of items, that was processed
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.IClickHouseAggregatingQueueProcessor`1.TotalPushedItemsCount">
            <summary>
            Total count of items, that was added to the processing queue
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.IClickHouseAggregatingQueueProcessor`1.TotalAddedItemsCount">
            <summary>
            Total count of items, that was added by Add or AddPackage methods
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.IClickHouseAggregatingQueueProcessor`1.TimerPeriodMs">
            <summary>
            Time in ms for package sending timer
            </summary>
        </member>
        <member name="F:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.State.Created">
            <summary>
            The instance is created, but not started
            </summary>
        </member>
        <member name="F:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.State.Started">
            <summary>
            The instance is working and ready to ready to receive items
            </summary>
        </member>
        <member name="F:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.State.Stopping">
            <summary>
            The instance is stopping, adding items is unavailable
            </summary>
        </member>
        <member name="F:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.State.Stoped">
            <summary>
            The instance is stopped
            </summary>
        </member>
        <member name="F:Qoollo.ClickHouse.Net.AggregatingQueueProcessor.State.Disposed">
            <summary>
            The instance is disposed 
            </summary>
        </member>
        <member name="T:Qoollo.ClickHouse.Net.ConnectionPool.ClickHouseConnectionPool">
            <summary>
            A connection pool that can work with a list of ClickHouse connection strings. 
            In case of a connection error, go to the next one from the list. 
            If all connection strings are invalid, an exception is thrown.
            </summary>
            <exception cref="T:Qoollo.ClickHouse.Net.ConnectionPool.ClickHouseConnectionException"></exception>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.ConnectionPool.ClickHouseConnectionPool.#ctor(Qoollo.ClickHouse.Net.ConnectionPool.Configuration.IClickHouseConnectionPoolConfiguration,Microsoft.Extensions.Logging.ILogger{Qoollo.ClickHouse.Net.ConnectionPool.ClickHouseConnectionPool})">
            <summary>
            
            </summary>
            <param name="config">Configuration</param>
            <param name="logger">logger instance</param>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.ConnectionPool.ClickHouseConnectionPool.OpenNewConnection">
            <summary>
            Pass through all connection strings in search of working. If not found, the last one will throw an exception
            </summary>
            <returns>New opened connection</returns>
            <exception cref="T:Qoollo.ClickHouse.Net.ConnectionPool.ClickHouseConnectionException"></exception>
        </member>
        <member name="T:Qoollo.ClickHouse.Net.ConnectionPool.Configuration.ClickHouseConnectionPoolConfiguration">
            <summary>
            Configuration for ClickHouseConnectionPool
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.ConnectionPool.Configuration.ClickHouseConnectionPoolConfiguration.ConnectionStrings">
            <summary>
            List of connection strings.
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.ConnectionPool.Configuration.ClickHouseConnectionPoolConfiguration.ConnectionPoolMaxCount">
            <summary>
            Maximum elements count for connection pool.
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.ConnectionPool.Configuration.ClickHouseConnectionPoolConfiguration.ConnectionPoolName">
            <summary>
            Name for connection pool
            </summary>
        </member>
        <member name="T:Qoollo.ClickHouse.Net.ConnectionPool.Configuration.IClickHouseConnectionPoolConfiguration">
            <summary>
            Configuration for ClickHouseConnectionPool
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.ConnectionPool.Configuration.IClickHouseConnectionPoolConfiguration.ConnectionStrings">
            <summary>
            List of connection strings.
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.ConnectionPool.Configuration.IClickHouseConnectionPoolConfiguration.ConnectionPoolMaxCount">
            <summary>
            Maximum elements count for connection pool.
            </summary>
        </member>
        <member name="P:Qoollo.ClickHouse.Net.ConnectionPool.Configuration.IClickHouseConnectionPoolConfiguration.ConnectionPoolName">
            <summary>
            Name for connection pool
            </summary>
        </member>
        <member name="T:Qoollo.ClickHouse.Net.Repository.IClickHouseRepository">
            <summary>
            A repository that implements convenient wrappers for common use cases of ClickHouse. 
            Also provides the ability to execute an arbitrary query.
            </summary>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.Repository.IClickHouseRepository.BulkInsert``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Batch Insert Method, allows customizing query. Warning - the wrong query can be a reason for the exceptions.
            </summary>
            <typeparam name="T">Entity type, should implement IEnumerable</typeparam>
            <param name="queryText">Text of insert query. The query should contain @bulk parameter.</param>
            <param name="bulk">Collection for insert.</param>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.Repository.IClickHouseRepository.BulkInsertAsync``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Asynchronous Batch Insert Method, allows customizing query. Warning - the wrong query can be a reason for the exceptions.
            </summary>
            <typeparam name="T">Entity type, should implement IEnumerable</typeparam>
            <param name="queryText">Text of insert query. The query should contain @bulk parameter.</param>
            <param name="bulk">Collection for insert.</param>
            <returns></returns>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.Repository.IClickHouseRepository.BulkInsert``1(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Batch Insert Method. Generates query from table name and row names. 
            </summary>
            <typeparam name="T">Entity type, should implement IEnumerable</typeparam>
            <param name="tableName">The name of the table into which data will be inserted.</param>
            <param name="columns">A list of column names into which data will be inserted. Order is important!</param>
            <param name="bulk">Collection for insert.</param>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.Repository.IClickHouseRepository.BulkInsertAsync``1(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Asynchronous Batch Insert Method. Generates query from table name and row names. 
            </summary>
            <typeparam name="T">Entity type, should implement IEnumerable</typeparam>
            <param name="tableName">The name of the table into which data will be inserted</param>
            <param name="columns">A list of column names into which data will be inserted. Order is important!</param>
            <param name="bulk">Collection for insert.</param>
            <returns></returns>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.Repository.IClickHouseRepository.BulkInsert(System.String,ClickHouse.Ado.IBulkInsertEnumerable)">
            <summary>
            Batch Insert Method, allows customizing query. Warning - the wrong query can be a reason for the exceptions.
            Uses IBulkInsertEnumerable to speed up processing and use less memory inside ClickHouse driver. 
            </summary>
            <param name="queryText">Text of insert query. The query should contain @bulk parameter.</param>
            <param name="bulk">Collection for insert.</param>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.Repository.IClickHouseRepository.BulkInsertAsync(System.String,ClickHouse.Ado.IBulkInsertEnumerable)">
            <summary>
            Asynchronous Batch Insert Method, allows customizing query. Warning - the wrong query can be a reason for the exceptions.
            Uses IBulkInsertEnumerable to speed up processing and use less memory inside ClickHouse driver. 
            </summary>
            <param name="queryText">Text of insert query. The query should contain @bulk parameter.</param>
            <param name="bulk">Collection for insert.</param>
            <returns></returns>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.Repository.IClickHouseRepository.BulkInsert(System.String,System.Collections.Generic.IEnumerable{System.String},ClickHouse.Ado.IBulkInsertEnumerable)">
            <summary>
            Batch Insert Method. Generates query from table name and row names. 
            Uses IBulkInsertEnumerable to speed up processing and use less memory inside ClickHouse driver. 
            </summary>
            <param name="tableName">The name of the table into which data will be inserted.</param>
            <param name="columns">A list of column names into which data will be inserted. Order is important!</param>
            <param name="bulk">Collection for insert.</param>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.Repository.IClickHouseRepository.BulkInsertAsync(System.String,System.Collections.Generic.IEnumerable{System.String},ClickHouse.Ado.IBulkInsertEnumerable)">
            <summary>
            Asynchronous Batch Insert Method. Generates query from table name and row names. 
            Uses IBulkInsertEnumerable to speed up processing and use less memory inside ClickHouse driver. 
            </summary>
            <param name="tableName">The name of the table into which data will be inserted.</param>
            <param name="columns">A list of column names into which data will be inserted. Order is important!</param>
            <param name="bulk">Collection for insert.</param>
            <returns></returns>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.Repository.IClickHouseRepository.ExecuteNonQuery(System.String,System.Collections.Generic.IEnumerable{ClickHouse.Ado.ClickHouseParameter})">
            <summary>
            Method for executing query without result
            </summary>
            <param name="queryText">Text for select query. The query should contain all parameters from parameters list.</param>
            <param name="parameters">Collection of parameters for query.</param>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.Repository.IClickHouseRepository.ExecuteNonQueryAsync(System.String,System.Collections.Generic.IEnumerable{ClickHouse.Ado.ClickHouseParameter})">
            <summary>
            Asynchronous method for executing query without result
            </summary>
            <param name="queryText">Text for select query. The query should contain all parameters from parameters list.</param>
            <param name="parameters">Collection of parameters for query.</param>
            <returns></returns>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.Repository.IClickHouseRepository.ExecuteScalar(System.String,System.Collections.Generic.IEnumerable{ClickHouse.Ado.ClickHouseParameter})">
            <summary>
            Method for executing query and read first result.
            </summary>
            <param name="queryText">Text for select query. The query should contain all parameters from parameters list.</param>
            <param name="parameters">Collection of parameters for query.</param>
            <returns>first result without any mapping</returns>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.Repository.IClickHouseRepository.ExecuteScalarAsync(System.String,System.Collections.Generic.IEnumerable{ClickHouse.Ado.ClickHouseParameter})">
            <summary>
            Asynchronous method for executing query and read first result.
            </summary>
            <param name="queryText">Text for select query. The query should contain all parameters from parameters list.</param>
            <param name="parameters">Collection of parameters for query.</param>
            <returns>first result without any mapping</returns>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.Repository.IClickHouseRepository.ExecuteReader``1(System.String,System.Func{System.Data.IDataReader,``0},System.Collections.Generic.IEnumerable{ClickHouse.Ado.ClickHouseParameter})">
            <summary>
            Method for executing a custom query processor
            </summary>
            <typeparam name="T">Result type for processor</typeparam>
            <param name="queryText">Text for select query. The query should contain all parameters from parameters list.</param>
            <param name="processor">Custom query processor.</param>
            <param name="parameters">Collection of parameters for query.</param>
            <returns>Result of processor</returns>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.Repository.IClickHouseRepository.ExecuteReaderAsync``1(System.String,System.Func{System.Data.IDataReader,``0},System.Collections.Generic.IEnumerable{ClickHouse.Ado.ClickHouseParameter})">
            <summary>
            Asynchronous method for executing a custom query processor.
            </summary>
            <typeparam name="T">Result type for processor</typeparam>
            <param name="queryText">Text for select query. The query should contain all parameters from parameters list.</param>
            <param name="processor">Custom query processor.</param>
            <param name="parameters">Collection of parameters for query.</param>
            <returns>Result of processor</returns>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.Repository.IClickHouseRepository.ExecuteQueryMapping``1(System.String,Qoollo.ClickHouse.Net.Repository.IEntityMapper{``0},System.Collections.Generic.IEnumerable{ClickHouse.Ado.ClickHouseParameter})">
            <summary>
            Method for executing a SELECT query that maps the received data to a specific type of entity.
            </summary>
            <typeparam name="T">The type of entity on which the data will be mapped</typeparam>
            <param name="queryText">Text for select query. The query should contain all parameters from parameters list.</param>
            <param name="mapper">Mapper implementation for type T.</param>
            <param name="parameters">Collection of parameters for query.</param>
            <returns>Collection of entities</returns>
        </member>
        <member name="M:Qoollo.ClickHouse.Net.Repository.IClickHouseRepository.ExecuteQueryMappingAsync``1(System.String,Qoollo.ClickHouse.Net.Repository.IEntityMapper{``0},System.Collections.Generic.IEnumerable{ClickHouse.Ado.ClickHouseParameter})">
            <summary>
            Asynchronous method for executing a SELECT query that maps the received data to a specific type of entity.
            </summary>
            <typeparam name="T">The type of entity on which the data will be mapped</typeparam>
            <param name="queryText">Text for select query. The query should contain all parameters from parameters list.</param>
            <param name="mapper">Mapper implementation for type T.</param>
            <param name="parameters">Collection of parameters for query.</param>
            <returns>Collection of entities</returns>
        </member>
    </members>
</doc>
